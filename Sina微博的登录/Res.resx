<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="RSA" xml:space="preserve">
    <value>function getpwd(servertime, nonce, pubkey, pwd) {
    var e = new sinaSSOEncoder.RSAKey;
    e.setPublic(pubkey, "10001");
    pwd = e.encrypt([servertime, nonce].join("\t") + "\n" + pwd)
    return pwd;
//以下MD5加密代码仅供参考
//sinaSSOEncoder.hex_sha1("" + sinaSSOEncoder.hex_sha1(sinaSSOEncoder.hex_sha1(pwd)) + servertime + nonce)
}
function Base64E(str)
{
return sinaSSOEncoder.base64.encode(encodeURIComponent(str));
}
navigator={};var sinaSSOEncoder = sinaSSOEncoder || {};
    (function() {
        var a = 0
          , b = 8;
        this.hex_sha1 = function(a) {
            return i(c(h(a), a.length * b))
        }
        ;
        var c = function(a, b) {
            a[b &gt;&gt; 5] |= 128 &lt;&lt; 24 - b % 32;
            a[(b + 64 &gt;&gt; 9 &lt;&lt; 4) + 15] = b;
            var c = Array(80)
              , h = 1732584193
              , i = -271733879
              , j = -1732584194
              , k = 271733878
              , l = -1009589776;
            for (var m = 0; m &lt; a.length; m += 16) {
                var n = h
                  , o = i
                  , p = j
                  , q = k
                  , r = l;
                for (var s = 0; s &lt; 80; s++) {
                    s &lt; 16 ? c[s] = a[m + s] : c[s] = g(c[s - 3] ^ c[s - 8] ^ c[s - 14] ^ c[s - 16], 1);
                    var t = f(f(g(h, 5), d(s, i, j, k)), f(f(l, c[s]), e(s)));
                    l = k;
                    k = j;
                    j = g(i, 30);
                    i = h;
                    h = t
                }
                h = f(h, n);
                i = f(i, o);
                j = f(j, p);
                k = f(k, q);
                l = f(l, r)
            }
            return [h, i, j, k, l]
        }
          , d = function(a, b, c, d) {
            return a &lt; 20 ? b &amp; c | ~b &amp; d : a &lt; 40 ? b ^ c ^ d : a &lt; 60 ? b &amp; c | b &amp; d | c &amp; d : b ^ c ^ d
        }
          , e = function(a) {
            return a &lt; 20 ? 1518500249 : a &lt; 40 ? 1859775393 : a &lt; 60 ? -1894007588 : -899497514
        }
          , f = function(a, b) {
            var c = (a &amp; 65535) + (b &amp; 65535)
              , d = (a &gt;&gt; 16) + (b &gt;&gt; 16) + (c &gt;&gt; 16);
            return d &lt;&lt; 16 | c &amp; 65535
        }
          , g = function(a, b) {
            return a &lt;&lt; b | a &gt;&gt;&gt; 32 - b
        }
          , h = function(a) {
            var c = []
              , d = (1 &lt;&lt; b) - 1;
            for (var e = 0; e &lt; a.length * b; e += b)
                c[e &gt;&gt; 5] |= (a.charCodeAt(e / b) &amp; d) &lt;&lt; 24 - e % 32;
            return c
        }
          , i = function(b) {
            var c = a ? "0123456789ABCDEF" : "0123456789abcdef"
              , d = "";
            for (var e = 0; e &lt; b.length * 4; e++)
                d += c.charAt(b[e &gt;&gt; 2] &gt;&gt; (3 - e % 4) * 8 + 4 &amp; 15) + c.charAt(b[e &gt;&gt; 2] &gt;&gt; (3 - e % 4) * 8 &amp; 15);
            return d
        }
          , j = function(a) {
            var b = ""
              , c = 0;
            for (; c &lt; a.length; c++)
                b += "%" + k(a[c]);
            return decodeURIComponent(b)
        }
          , k = function(a) {
            var b = "0" + a.toString(16);
            return b.length &lt;= 2 ? b : b.substr(1)
        };
        this.base64 = {
            encode: function(a) {
                a = "" + a;
                if (a == "")
                    return "";
                var b = "", c, d, e = "", f, g, h, i = "", j = 0;
                do {
                    c = a.charCodeAt(j++);
                    d = a.charCodeAt(j++);
                    e = a.charCodeAt(j++);
                    f = c &gt;&gt; 2;
                    g = (c &amp; 3) &lt;&lt; 4 | d &gt;&gt; 4;
                    h = (d &amp; 15) &lt;&lt; 2 | e &gt;&gt; 6;
                    i = e &amp; 63;
                    isNaN(d) ? h = i = 64 : isNaN(e) &amp;&amp; (i = 64);
                    b = b + this._keys.charAt(f) + this._keys.charAt(g) + this._keys.charAt(h) + this._keys.charAt(i);
                    c = d = e = "";
                    f = g = h = i = ""
                } while (j &lt; a.length);return b
            },
            decode: function(a, b, c) {
                var d = function(a, b) {
                    for (var c = 0; c &lt; a.length; c++)
                        if (a[c] === b)
                            return c;
                    return -1
                };
                typeof a == "string" &amp;&amp; (a = a.split(""));
                var e = [], f, g, h = "", i, j, k, l = "";
                a.length % 4 == 0;
                var m = /[^A-Za-z0-9+\/=]/
                  , n = this._keys.split("");
                if (b == "urlsafe") {
                    m = /[^A-Za-z0-9-_=]/;
                    n = this._keys_urlsafe.split("")
                }
                if (b == "subp_v2") {
                    m = /[^A-Za-z0-9_=-]/;
                    n = this._subp_v2_keys.split("")
                }
                if (b == "subp_v3_3") {
                    m = /[^A-Za-z0-9-_.-]/;
                    n = this._subp_v3_keys_3.split("")
                }
                var o = 0;
                if (b == "binnary") {
                    n = [];
                    for (o = 0; o &lt;= 64; o++)
                        n[o] = o + 128
                }
                if (b != "binnary" &amp;&amp; m.test(a.join("")))
                    return c == "array" ? [] : "";
                o = 0;
                do {
                    i = d(n, a[o++]);
                    j = d(n, a[o++]);
                    k = d(n, a[o++]);
                    l = d(n, a[o++]);
                    f = i &lt;&lt; 2 | j &gt;&gt; 4;
                    g = (j &amp; 15) &lt;&lt; 4 | k &gt;&gt; 2;
                    h = (k &amp; 3) &lt;&lt; 6 | l;
                    e.push(f);
                    k != 64 &amp;&amp; k != -1 &amp;&amp; e.push(g);
                    l != 64 &amp;&amp; l != -1 &amp;&amp; e.push(h);
                    f = g = h = "";
                    i = j = k = l = ""
                } while (o &lt; a.length);if (c == "array")
                    return e;
                var p = ""
                  , q = 0;
                for (; q &lt; e.lenth; q++)
                    p += String.fromCharCode(e[q]);
                return p
            },
            _keys: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
            _keys_urlsafe: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=",
            _subp_v2_keys: "uAL715W8e3jJCcNU0lT_FSXVgxpbEDdQ4vKaIOH2GBPtfzqsmYZo-wRM9i6hynrk=",
            _subp_v3_keys_3: "5WFh28sGziZTeS1lBxCK-HgPq9IdMUwknybo.LJrQD3uj_Va7pE0XfcNR4AOYvm6t"
        };
        this.Cookie = {
            decode: function(a) {
                var b = []
                  , c = a.substr(0, 3)
                  , d = a.substr(3);
                switch (c) {
                case "v01":
                    for (var e = 0; e &lt; d.length; e += 2)
                        b.push(parseInt(d.substr(e, 2), 16));
                    return decodeURIComponent(j(sinaSSOEncoder.base64.decode(b, "binnary", "array")));
                case "v02":
                    d = d.replace(/\./g, "=");
                    b = sinaSSOEncoder.base64.decode(d, "urlsafe", "array");
                    return j(sinaSSOEncoder.base64.decode(b, "binnary", "array"));
                default:
                    return decodeURIComponent(a)
                }
            }
        };
        this.getSUBPCookie = {
            __parse: function(a) {
                var b, c, d, e, f, g = 0, h, i = {}, k = "", l = "";
                if (!a)
                    return i;
                do {
                    c = a[g];
                    b = ++g;
                    for (h = g; h &lt; c + b; h++,
                    g++)
                        k += String.fromCharCode(a[h]);
                    e = a[g];
                    b = ++g;
                    if (k == "status" || k == "flag")
                        for (h = g; h &lt; e + b; h++,
                        g++)
                            l += a[h];
                    else {
                        l = a.slice(b, e + b);
                        try {
                            l = j(l)
                        } catch (m) {
                            l = ""
                        }
                        g += e
                    }
                    i[k] = l;
                    k = "";
                    l = ""
                } while (g &lt; a.length);return i
            },
            decode: function(a) {
                var b = [], c, d = a.substr(0, 3), e = decodeURIComponent(a.substr(3));
                switch (d) {
                case "002":
                    b = sinaSSOEncoder.base64.decode(e, "subp_v2", "array");
                    return sinaSSOEncoder.getSUBPCookie.__parse(b);
                case "003":
                    c = e.substr(0, 1);
                    e = e.substr(1);
                    b = sinaSSOEncoder.base64.decode(e, "subp_v3_" + c, "array");
                    return sinaSSOEncoder.getSUBPCookie.__parse(b);
                default:
                    return decodeURIComponent(a)
                }
            }
        }
    }
    ).call(sinaSSOEncoder);
(function() {
        function bt(a) {
            var b = bp(a, this.n.bitLength() + 7 &gt;&gt; 3);
            if (b == null)
                return null;
            var c = this.doPublic(b);
            if (c == null)
                return null;
            var d = c.toString(16);
            return (d.length &amp; 1) == 0 ? d : "0" + d
        }
        function bs(a) {
            return a.modPowInt(this.e, this.n)
        }
        function br(a, b) {
            if (a != null &amp;&amp; b != null &amp;&amp; a.length &gt; 0 &amp;&amp; b.length &gt; 0) {
                this.n = bm(a, 16);
                this.e = parseInt(b, 16)
            } else
                alert("Invalid RSA public key")
        }
        function bq() {
            this.n = null;
            this.e = 0;
            this.d = null;
            this.p = null;
            this.q = null;
            this.dmp1 = null;
            this.dmq1 = null;
            this.coeff = null
        }
        function bp(a, b) {
            if (b &lt; a.length + 11) {
                alert("Message too long for RSA");
                return null
            }
            var c = []
              , e = a.length - 1;
            while (e &gt;= 0 &amp;&amp; b &gt; 0) {
                var f = a.charCodeAt(e--);
                if (f &lt; 128)
                    c[--b] = f;
                else if (f &gt; 127 &amp;&amp; f &lt; 2048) {
                    c[--b] = f &amp; 63 | 128;
                    c[--b] = f &gt;&gt; 6 | 192
                } else {
                    c[--b] = f &amp; 63 | 128;
                    c[--b] = f &gt;&gt; 6 &amp; 63 | 128;
                    c[--b] = f &gt;&gt; 12 | 224
                }
            }
            c[--b] = 0;
            var g = new bl
              , h = [];
            while (b &gt; 2) {
                h[0] = 0;
                while (h[0] == 0)
                    g.nextBytes(h);
                c[--b] = h[0]
            }
            c[--b] = 2;
            c[--b] = 0;
            return new d(c)
        }
        function bo(a) {
            return a &lt; 16 ? "0" + a.toString(16) : a.toString(16)
        }
        function bn(a, b) {
            var c = ""
              , d = 0;
            while (d + b &lt; a.length) {
                c += a.substring(d, d + b) + "\n";
                d += b
            }
            return c + a.substring(d, a.length)
        }
        function bm(a, b) {
            return new d(a,b)
        }
        function bl() {}
        function bk(a) {
            var b;
            for (b = 0; b &lt; a.length; ++b)
                a[b] = bj()
        }
        function bj() {
            if (bc == null) {
                bg();
                bc = ba();
                bc.init(bd);
                for (be = 0; be &lt; bd.length; ++be)
                    bd[be] = 0;
                be = 0
            }
            return bc.next()
        }
        function bg() {
            bf((new Date).getTime())
        }
        function bf(a) {
            bd[be++] ^= a &amp; 255;
            bd[be++] ^= a &gt;&gt; 8 &amp; 255;
            bd[be++] ^= a &gt;&gt; 16 &amp; 255;
            bd[be++] ^= a &gt;&gt; 24 &amp; 255;
            be &gt;= bb &amp;&amp; (be -= bb)
        }
        function ba() {
            return new Z
        }
        function _() {
            var a;
            this.i = this.i + 1 &amp; 255;
            this.j = this.j + this.S[this.i] &amp; 255;
            a = this.S[this.i];
            this.S[this.i] = this.S[this.j];
            this.S[this.j] = a;
            return this.S[a + this.S[this.i] &amp; 255]
        }
        function $(a) {
            var b, c, d;
            for (b = 0; b &lt; 256; ++b)
                this.S[b] = b;
            c = 0;
            for (b = 0; b &lt; 256; ++b) {
                c = c + this.S[b] + a[b % a.length] &amp; 255;
                d = this.S[b];
                this.S[b] = this.S[c];
                this.S[c] = d
            }
            this.i = 0;
            this.j = 0
        }
        function Z() {
            this.i = 0;
            this.j = 0;
            this.S = []
        }
        function Y(a, b) {
            var c;
            a &lt; 256 || b.isEven() ? c = new J(b) : c = new Q(b);
            return this.exp(a, c)
        }
        function X(a, b) {
            if (a &gt; 4294967295 || a &lt; 1)
                return d.ONE;
            var c = e()
              , f = e()
              , g = b.convert(this)
              , h = y(a) - 1;
            g.copyTo(c);
            while (--h &gt;= 0) {
                b.sqrTo(c, f);
                if ((a &amp; 1 &lt;&lt; h) &gt; 0)
                    b.mulTo(f, g, c);
                else {
                    var i = c;
                    c = f;
                    f = i
                }
            }
            return b.revert(c)
        }
        function W() {
            return (this.t &gt; 0 ? this[0] &amp; 1 : this.s) == 0
        }
        function V(a, b, c) {
            a.multiplyTo(b, c);
            this.reduce(c)
        }
        function U(a, b) {
            a.squareTo(b);
            this.reduce(b)
        }
        function T(a) {
            while (a.t &lt;= this.mt2)
                a[a.t++] = 0;
            for (var b = 0; b &lt; this.m.t; ++b) {
                var c = a[b] &amp; 32767
                  , d = c * this.mpl + ((c * this.mph + (a[b] &gt;&gt; 15) * this.mpl &amp; this.um) &lt;&lt; 15) &amp; a.DM;
                c = b + this.m.t;
                a[c] += this.m.am(0, d, a, b, 0, this.m.t);
                while (a[c] &gt;= a.DV) {
                    a[c] -= a.DV;
                    a[++c]++
                }
            }
            a.clamp();
            a.drShiftTo(this.m.t, a);
            a.compareTo(this.m) &gt;= 0 &amp;&amp; a.subTo(this.m, a)
        }
        function S(a) {
            var b = e();
            a.copyTo(b);
            this.reduce(b);
            return b
        }
        function R(a) {
            var b = e();
            a.abs().dlShiftTo(this.m.t, b);
            b.divRemTo(this.m, null, b);
            a.s &lt; 0 &amp;&amp; b.compareTo(d.ZERO) &gt; 0 &amp;&amp; this.m.subTo(b, b);
            return b
        }
        function Q(a) {
            this.m = a;
            this.mp = a.invDigit();
            this.mpl = this.mp &amp; 32767;
            this.mph = this.mp &gt;&gt; 15;
            this.um = (1 &lt;&lt; a.DB - 15) - 1;
            this.mt2 = 2 * a.t
        }
        function P() {
            if (this.t &lt; 1)
                return 0;
            var a = this[0];
            if ((a &amp; 1) == 0)
                return 0;
            var b = a &amp; 3;
            b = b * (2 - (a &amp; 15) * b) &amp; 15;
            b = b * (2 - (a &amp; 255) * b) &amp; 255;
            b = b * (2 - ((a &amp; 65535) * b &amp; 65535)) &amp; 65535;
            b = b * (2 - a * b % this.DV) % this.DV;
            return b &gt; 0 ? this.DV - b : -b
        }
        function O(a, b) {
            a.squareTo(b);
            this.reduce(b)
        }
        function N(a, b, c) {
            a.multiplyTo(b, c);
            this.reduce(c)
        }
        function M(a) {
            a.divRemTo(this.m, null, a)
        }
        function L(a) {
            return a
        }
        function K(a) {
            return a.s &lt; 0 || a.compareTo(this.m) &gt;= 0 ? a.mod(this.m) : a
        }
        function J(a) {
            this.m = a
        }
        function I(a) {
            var b = e();
            this.abs().divRemTo(a, null, b);
            this.s &lt; 0 &amp;&amp; b.compareTo(d.ZERO) &gt; 0 &amp;&amp; a.subTo(b, b);
            return b
        }
        function H(a, b, c) {
            var f = a.abs();
            if (!(f.t &lt;= 0)) {
                var g = this.abs();
                if (g.t &lt; f.t) {
                    b != null &amp;&amp; b.fromInt(0);
                    c != null &amp;&amp; this.copyTo(c);
                    return
                }
                c == null &amp;&amp; (c = e());
                var h = e()
                  , i = this.s
                  , j = a.s
                  , k = this.DB - y(f[f.t - 1]);
                if (k &gt; 0) {
                    f.lShiftTo(k, h);
                    g.lShiftTo(k, c)
                } else {
                    f.copyTo(h);
                    g.copyTo(c)
                }
                var l = h.t
                  , m = h[l - 1];
                if (m == 0)
                    return;
                var n = m * (1 &lt;&lt; this.F1) + (l &gt; 1 ? h[l - 2] &gt;&gt; this.F2 : 0)
                  , o = this.FV / n
                  , p = (1 &lt;&lt; this.F1) / n
                  , q = 1 &lt;&lt; this.F2
                  , r = c.t
                  , s = r - l
                  , t = b == null ? e() : b;
                h.dlShiftTo(s, t);
                if (c.compareTo(t) &gt;= 0) {
                    c[c.t++] = 1;
                    c.subTo(t, c)
                }
                d.ONE.dlShiftTo(l, t);
                t.subTo(h, h);
                while (h.t &lt; l)
                    h[h.t++] = 0;
                while (--s &gt;= 0) {
                    var u = c[--r] == m ? this.DM : Math.floor(c[r] * o + (c[r - 1] + q) * p);
                    if ((c[r] += h.am(0, u, c, s, 0, l)) &lt; u) {
                        h.dlShiftTo(s, t);
                        c.subTo(t, c);
                        while (c[r] &lt; --u)
                            c.subTo(t, c)
                    }
                }
                if (b != null) {
                    c.drShiftTo(l, b);
                    i != j &amp;&amp; d.ZERO.subTo(b, b)
                }
                c.t = l;
                c.clamp();
                k &gt; 0 &amp;&amp; c.rShiftTo(k, c);
                i &lt; 0 &amp;&amp; d.ZERO.subTo(c, c)
            }
        }
        function G(a) {
            var b = this.abs()
              , c = a.t = 2 * b.t;
            while (--c &gt;= 0)
                a[c] = 0;
            for (c = 0; c &lt; b.t - 1; ++c) {
                var d = b.am(c, b[c], a, 2 * c, 0, 1);
                if ((a[c + b.t] += b.am(c + 1, 2 * b[c], a, 2 * c + 1, d, b.t - c - 1)) &gt;= b.DV) {
                    a[c + b.t] -= b.DV;
                    a[c + b.t + 1] = 1
                }
            }
            a.t &gt; 0 &amp;&amp; (a[a.t - 1] += b.am(c, b[c], a, 2 * c, 0, 1));
            a.s = 0;
            a.clamp()
        }
        function F(a, b) {
            var c = this.abs()
              , e = a.abs()
              , f = c.t;
            b.t = f + e.t;
            while (--f &gt;= 0)
                b[f] = 0;
            for (f = 0; f &lt; e.t; ++f)
                b[f + c.t] = c.am(0, e[f], b, f, 0, c.t);
            b.s = 0;
            b.clamp();
            this.s != a.s &amp;&amp; d.ZERO.subTo(b, b)
        }
        function E(a, b) {
            var c = 0
              , d = 0
              , e = Math.min(a.t, this.t);
            while (c &lt; e) {
                d += this[c] - a[c];
                b[c++] = d &amp; this.DM;
                d &gt;&gt;= this.DB
            }
            if (a.t &lt; this.t) {
                d -= a.s;
                while (c &lt; this.t) {
                    d += this[c];
                    b[c++] = d &amp; this.DM;
                    d &gt;&gt;= this.DB
                }
                d += this.s
            } else {
                d += this.s;
                while (c &lt; a.t) {
                    d -= a[c];
                    b[c++] = d &amp; this.DM;
                    d &gt;&gt;= this.DB
                }
                d -= a.s
            }
            b.s = d &lt; 0 ? -1 : 0;
            d &lt; -1 ? b[c++] = this.DV + d : d &gt; 0 &amp;&amp; (b[c++] = d);
            b.t = c;
            b.clamp()
        }
        function D(a, b) {
            b.s = this.s;
            var c = Math.floor(a / this.DB);
            if (c &gt;= this.t)
                b.t = 0;
            else {
                var d = a % this.DB
                  , e = this.DB - d
                  , f = (1 &lt;&lt; d) - 1;
                b[0] = this[c] &gt;&gt; d;
                for (var g = c + 1; g &lt; this.t; ++g) {
                    b[g - c - 1] |= (this[g] &amp; f) &lt;&lt; e;
                    b[g - c] = this[g] &gt;&gt; d
                }
                d &gt; 0 &amp;&amp; (b[this.t - c - 1] |= (this.s &amp; f) &lt;&lt; e);
                b.t = this.t - c;
                b.clamp()
            }
        }
        function C(a, b) {
            var c = a % this.DB, d = this.DB - c, e = (1 &lt;&lt; d) - 1, f = Math.floor(a / this.DB), g = this.s &lt;&lt; c &amp; this.DM, h;
            for (h = this.t - 1; h &gt;= 0; --h) {
                b[h + f + 1] = this[h] &gt;&gt; d | g;
                g = (this[h] &amp; e) &lt;&lt; c
            }
            for (h = f - 1; h &gt;= 0; --h)
                b[h] = 0;
            b[f] = g;
            b.t = this.t + f + 1;
            b.s = this.s;
            b.clamp()
        }
        function B(a, b) {
            for (var c = a; c &lt; this.t; ++c)
                b[c - a] = this[c];
            b.t = Math.max(this.t - a, 0);
            b.s = this.s
        }
        function A(a, b) {
            var c;
            for (c = this.t - 1; c &gt;= 0; --c)
                b[c + a] = this[c];
            for (c = a - 1; c &gt;= 0; --c)
                b[c] = 0;
            b.t = this.t + a;
            b.s = this.s
        }
        function z() {
            return this.t &lt;= 0 ? 0 : this.DB * (this.t - 1) + y(this[this.t - 1] ^ this.s &amp; this.DM)
        }
        function y(a) {
            var b = 1, c;
            if ((c = a &gt;&gt;&gt; 16) != 0) {
                a = c;
                b += 16
            }
            if ((c = a &gt;&gt; 8) != 0) {
                a = c;
                b += 8
            }
            if ((c = a &gt;&gt; 4) != 0) {
                a = c;
                b += 4
            }
            if ((c = a &gt;&gt; 2) != 0) {
                a = c;
                b += 2
            }
            if ((c = a &gt;&gt; 1) != 0) {
                a = c;
                b += 1
            }
            return b
        }
        function x(a) {
            var b = this.s - a.s;
            if (b != 0)
                return b;
            var c = this.t;
            b = c - a.t;
            if (b != 0)
                return b;
            while (--c &gt;= 0)
                if ((b = this[c] - a[c]) != 0)
                    return b;
            return 0
        }
        function w() {
            return this.s &lt; 0 ? this.negate() : this
        }
        function v() {
            var a = e();
            d.ZERO.subTo(this, a);
            return a
        }
        function u(a) {
            if (this.s &lt; 0)
                return "-" + this.negate().toString(a);
            var b;
            if (a == 16)
                b = 4;
            else if (a == 8)
                b = 3;
            else if (a == 2)
                b = 1;
            else if (a == 32)
                b = 5;
            else if (a == 4)
                b = 2;
            else
                return this.toRadix(a);
            var c = (1 &lt;&lt; b) - 1, d, e = !1, f = "", g = this.t, h = this.DB - g * this.DB % b;
            if (g-- &gt; 0) {
                if (h &lt; this.DB &amp;&amp; (d = this[g] &gt;&gt; h) &gt; 0) {
                    e = !0;
                    f = n(d)
                }
                while (g &gt;= 0) {
                    if (h &lt; b) {
                        d = (this[g] &amp; (1 &lt;&lt; h) - 1) &lt;&lt; b - h;
                        d |= this[--g] &gt;&gt; (h += this.DB - b)
                    } else {
                        d = this[g] &gt;&gt; (h -= b) &amp; c;
                        if (h &lt;= 0) {
                            h += this.DB;
                            --g
                        }
                    }
                    d &gt; 0 &amp;&amp; (e = !0);
                    e &amp;&amp; (f += n(d))
                }
            }
            return e ? f : "0"
        }
        function t() {
            var a = this.s &amp; this.DM;
            while (this.t &gt; 0 &amp;&amp; this[this.t - 1] == a)
                --this.t
        }
        function s(a, b) {
            var c;
            if (b == 16)
                c = 4;
            else if (b == 8)
                c = 3;
            else if (b == 256)
                c = 8;
            else if (b == 2)
                c = 1;
            else if (b == 32)
                c = 5;
            else if (b == 4)
                c = 2;
            else {
                this.fromRadix(a, b);
                return
            }
            this.t = 0;
            this.s = 0;
            var e = a.length
              , f = !1
              , g = 0;
            while (--e &gt;= 0) {
                var h = c == 8 ? a[e] &amp; 255 : o(a, e);
                if (h &lt; 0) {
                    a.charAt(e) == "-" &amp;&amp; (f = !0);
                    continue
                }
                f = !1;
                if (g == 0)
                    this[this.t++] = h;
                else if (g + c &gt; this.DB) {
                    this[this.t - 1] |= (h &amp; (1 &lt;&lt; this.DB - g) - 1) &lt;&lt; g;
                    this[this.t++] = h &gt;&gt; this.DB - g
                } else
                    this[this.t - 1] |= h &lt;&lt; g;
                g += c;
                g &gt;= this.DB &amp;&amp; (g -= this.DB)
            }
            if (c == 8 &amp;&amp; (a[0] &amp; 128) != 0) {
                this.s = -1;
                g &gt; 0 &amp;&amp; (this[this.t - 1] |= (1 &lt;&lt; this.DB - g) - 1 &lt;&lt; g)
            }
            this.clamp();
            f &amp;&amp; d.ZERO.subTo(this, this)
        }
        function r(a) {
            var b = e();
            b.fromInt(a);
            return b
        }
        function q(a) {
            this.t = 1;
            this.s = a &lt; 0 ? -1 : 0;
            a &gt; 0 ? this[0] = a : a &lt; -1 ? this[0] = a + DV : this.t = 0
        }
        function p(a) {
            for (var b = this.t - 1; b &gt;= 0; --b)
                a[b] = this[b];
            a.t = this.t;
            a.s = this.s
        }
        function o(a, b) {
            var c = k[a.charCodeAt(b)];
            return c == null ? -1 : c
        }
        function n(a) {
            return j.charAt(a)
        }
        function h(a, b, c, d, e, f) {
            var g = b &amp; 16383
              , h = b &gt;&gt; 14;
            while (--f &gt;= 0) {
                var i = this[a] &amp; 16383
                  , j = this[a++] &gt;&gt; 14
                  , k = h * i + j * g;
                i = g * i + ((k &amp; 16383) &lt;&lt; 14) + c[d] + e;
                e = (i &gt;&gt; 28) + (k &gt;&gt; 14) + h * j;
                c[d++] = i &amp; 268435455
            }
            return e
        }
        function g(a, b, c, d, e, f) {
            var g = b &amp; 32767
              , h = b &gt;&gt; 15;
            while (--f &gt;= 0) {
                var i = this[a] &amp; 32767
                  , j = this[a++] &gt;&gt; 15
                  , k = h * i + j * g;
                i = g * i + ((k &amp; 32767) &lt;&lt; 15) + c[d] + (e &amp; 1073741823);
                e = (i &gt;&gt;&gt; 30) + (k &gt;&gt;&gt; 15) + h * j + (e &gt;&gt;&gt; 30);
                c[d++] = i &amp; 1073741823
            }
            return e
        }
        function f(a, b, c, d, e, f) {
            while (--f &gt;= 0) {
                var g = b * this[a++] + c[d] + e;
                e = Math.floor(g / 67108864);
                c[d++] = g &amp; 67108863
            }
            return e
        }
        function e() {
            return new d(null)
        }
        function d(a, b, c) {
            a != null &amp;&amp; ("number" == typeof a ? this.fromNumber(a, b, c) : b == null &amp;&amp; "string" != typeof a ? this.fromString(a, 256) : this.fromString(a, b))
        }
        var a, b = 0xdeadbeefcafe, c = (b &amp; 16777215) == 15715070;
        if (c &amp;&amp; navigator.appName == "Microsoft Internet Explorer") {
            d.prototype.am = g;
            a = 30
        } else if (c &amp;&amp; navigator.appName != "Netscape") {
            d.prototype.am = f;
            a = 26
        } else {
            d.prototype.am = h;
            a = 28
        }
        d.prototype.DB = a;
        d.prototype.DM = (1 &lt;&lt; a) - 1;
        d.prototype.DV = 1 &lt;&lt; a;
        var i = 52;
        d.prototype.FV = Math.pow(2, i);
        d.prototype.F1 = i - a;
        d.prototype.F2 = 2 * a - i;
        var j = "0123456789abcdefghijklmnopqrstuvwxyz", k = [], l, m;
        l = "0".charCodeAt(0);
        for (m = 0; m &lt;= 9; ++m)
            k[l++] = m;
        l = "a".charCodeAt(0);
        for (m = 10; m &lt; 36; ++m)
            k[l++] = m;
        l = "A".charCodeAt(0);
        for (m = 10; m &lt; 36; ++m)
            k[l++] = m;
        J.prototype.convert = K;
        J.prototype.revert = L;
        J.prototype.reduce = M;
        J.prototype.mulTo = N;
        J.prototype.sqrTo = O;
        Q.prototype.convert = R;
        Q.prototype.revert = S;
        Q.prototype.reduce = T;
        Q.prototype.mulTo = V;
        Q.prototype.sqrTo = U;
        d.prototype.copyTo = p;
        d.prototype.fromInt = q;
        d.prototype.fromString = s;
        d.prototype.clamp = t;
        d.prototype.dlShiftTo = A;
        d.prototype.drShiftTo = B;
        d.prototype.lShiftTo = C;
        d.prototype.rShiftTo = D;
        d.prototype.subTo = E;
        d.prototype.multiplyTo = F;
        d.prototype.squareTo = G;
        d.prototype.divRemTo = H;
        d.prototype.invDigit = P;
        d.prototype.isEven = W;
        d.prototype.exp = X;
        d.prototype.toString = u;
        d.prototype.negate = v;
        d.prototype.abs = w;
        d.prototype.compareTo = x;
        d.prototype.bitLength = z;
        d.prototype.mod = I;
        d.prototype.modPowInt = Y;
        d.ZERO = r(0);
        d.ONE = r(1);
        Z.prototype.init = $;
        Z.prototype.next = _;
        var bb = 256, bc, bd, be;
        if (bd == null) {
            bd = [];
            be = 0;
            var bh;
            if (navigator.appName == "Netscape" &amp;&amp; navigator.appVersion &lt; "5" &amp;&amp; window.crypto &amp;&amp; typeof window.crypto.random == "function") {
                var bi = window.crypto.random(32);
                for (bh = 0; bh &lt; bi.length; ++bh)
                    bd[be++] = bi.charCodeAt(bh) &amp; 255
            }
            while (be &lt; bb) {
                bh = Math.floor(65536 * Math.random());
                bd[be++] = bh &gt;&gt;&gt; 8;
                bd[be++] = bh &amp; 255
            }
            be = 0;
            bg()
        }
        bl.prototype.nextBytes = bk;
        bq.prototype.doPublic = bs;
        bq.prototype.setPublic = br;
        bq.prototype.encrypt = bt;
        this.RSAKey = bq
    }
    ).call(sinaSSOEncoder);</value>
  </data>
</root>